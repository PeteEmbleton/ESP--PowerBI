
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <WiFiUdp.h>

//things to change
char ssid[] = "<wifi SSID>";
char password[] = "<wifi password>";
String Stn_name = "Station4";
int headerLength = 47;
String url = "https://api.powerbi.com/beta/<super long string from the PowerBI connection>";

// Initialize the client library
WiFiClient client;

// Use WiFiClientSecure class to create TLS connection
WiFiClientSecure clientssh;

const char* host = "api.powerbi.com";
const int httpsPort = 443;

int data;
unsigned int localPort = 2390;      // local port to listen for UDP packets
IPAddress timeServerIP; 
const char* ntpServerName = "au.pool.ntp.org"; // time.nist.gov NTP server

const int NTP_PACKET_SIZE = 48; // NTP time stamp is in the first 48 bytes of the message
byte packetBuffer[ NTP_PACKET_SIZE]; //buffer to hold incoming and outgoing packets

const int timeZone = 10;
unsigned long epoch = 0;


// A UDP instance to let us send and receive packets over UDP
WiFiUDP udp;

 
 
void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.print("connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  
  udp.begin(localPort); //start the udp protocol
}

void SendToPowerBI(String Stn_name, int data, int epoch){  
  Serial.print("connecting to ");
  Serial.println(host);
  if (!clientssh.connect(host, httpsPort)) {
    Serial.println("connection failed");
  }

  
  //have to get the length of the data we are sending
  String dataString = String(data);  
  int dataLength = dataString.length();
  String epochString = String(epoch);
  int epochLength = epochString.length();
  int Stn_nameLength = Stn_name.length();
  int totalLength = dataLength + epochLength + Stn_nameLength + headerLength; 
  Serial.println(totalLength);

  
  String DataToSend = "POST " + url + " HTTP/1.1\r\n" ;
  DataToSend += "Content-Type: application/x-www-form-urlencoded\r\n";
  DataToSend += "Host: api.powerbi.com\r\n";
  DataToSend += "Connection: Keep-Alive\r\n";
  DataToSend += "Content-Length: ";
  DataToSend += totalLength;
  DataToSend += "\r\n\r\n";
  DataToSend += "\[\r\n";
  DataToSend += "\{\r\n";
  DataToSend += "\"Stn_name\":";
  DataToSend += "\"" + Stn_name + "\",\r\n";
  DataToSend += "\"data\":";
  DataToSend += data;
  DataToSend += ",\r\n";
  DataToSend += "\"epoch\":";
  DataToSend += epoch;
  DataToSend += "\r\n";
  DataToSend += "\}\r\n";
  DataToSend += "\]\r\n";

  Serial.println(DataToSend);
  clientssh.print(DataToSend);
  
}

// send an NTP request to the time server at the given address
unsigned long sendNTPpacket(IPAddress& address)  {
  //Serial.println("sending NTP packet...");
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12]  = 49;
  packetBuffer[13]  = 0x4E;
  packetBuffer[14]  = 49;
  packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  udp.beginPacket(address, 123); //NTP requests are to port 123
  udp.write(packetBuffer, NTP_PACKET_SIZE);
  udp.endPacket();
  }

int getNTP(){
  //get a random server from the pool
  WiFi.hostByName(ntpServerName, timeServerIP); 

  sendNTPpacket(timeServerIP); // send an NTP packet to a time server
  // wait to see if a reply is available
  delay(1000);
  
  int cb = udp.parsePacket();
  if (!cb) {
   // Serial.println("no packet yet");
  }
  else {
   //Serial.print("packet received, length=");
   //Serial.println(cb);
    // We've received a packet, read the data from it
    udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer

    //the timestamp starts at byte 40 of the received packet and is four bytes,
    // or two words, long. First, esxtract the two words:

    unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
    unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
    // combine the four bytes (two words) into a long integer
    // this is NTP time (seconds since Jan 1 1900):
    unsigned long secsSince1900 = highWord << 16 | lowWord;
    //Serial.print("Seconds since Jan 1 1900 = " );
    //Serial.println(secsSince1900);

    // now convert NTP time into everyday time:
    //Serial.print("Unix time = ");
    // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:
    const unsigned long seventyYears = 2208988800UL;
    // subtract seventy years:
    unsigned long epoch = secsSince1900 - seventyYears + timeZone * 3600;
    // print Unix time:
    //Serial.println(epoch);

  return epoch;

    }
  }



void loop() {
 
  epoch = getNTP(); 
  while (epoch < 1000 && epoch > 2000000000){ //test for incorrect epoch data
    epoch = getNTP();
    delay(500);
  }
    int quality = analogRead(A0);
    while (quality == 0){
      int quality = analogRead(A0);
      delay(500);
    }
    SendToPowerBI(Stn_name,quality,epoch);
    delay(5000);
  
}
